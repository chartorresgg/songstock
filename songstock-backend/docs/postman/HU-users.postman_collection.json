{
	"info": {
		"name": "SongStock - HU: Gesti√≥n Administrativa de Usuarios",
		"description": "Validaci√≥n de la Historia de Usuario: Como administrador, quiero gestionar compradores y proveedores para garantizar el correcto uso de la plataforma",
		"version": "1.0.0",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{jwt_token}}",
				"type": "string"
			}
		]
	},
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8080/api/v1",
			"type": "string"
		},
		{
			"key": "jwt_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "admin_user_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "test_user_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "test_provider_id",
			"value": "",
			"type": "string"
		}
	],
	"item": [
		{
			"name": "1. üîê Setup - Login Admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Login admin exitoso\", function () {",
							"    if (pm.response.code === 200) {",
							"        const response = pm.response.json();",
							"        if (response.success && response.data.token) {",
							"            pm.collectionVariables.set('jwt_token', response.data.token);",
							"            pm.expect(response.data.token).to.not.be.empty;",
							"            console.log('‚úÖ Token JWT Admin guardado exitosamente');",
							"        }",
							"    }",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"usernameOrEmail\": \"admin\",\n    \"password\": \"admin123\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/auth/login",
					"host": ["{{base_url}}"],
					"path": ["auth", "login"]
				}
			}
		},
		{
			"name": "2. üë§ Crear Usuario de Prueba",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Usuario de prueba creado\", function () {",
							"    pm.response.to.have.status(201);",
							"    const response = pm.response.json();",
							"    pm.expect(response.success).to.be.true;",
							"    if (response.data && response.data.id) {",
							"        pm.collectionVariables.set('test_user_id', String(response.data.id));",
							"        console.log('‚úÖ Usuario de prueba creado - ID: ' + response.data.id);",
							"    }",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"test_customer\",\n    \"email\": \"test.customer@songstock.com\",\n    \"password\": \"TestCustomer123!\",\n    \"firstName\": \"Carlos\",\n    \"lastName\": \"Testuser\",\n    \"phone\": \"+506-8888-7777\",\n    \"role\": \"CUSTOMER\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/auth/register",
					"host": ["{{base_url}}"],
					"path": ["auth", "register"]
				}
			}
		},
		{
			"name": "3. üè¢ Crear Proveedor de Prueba",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Proveedor de prueba creado\", function () {",
							"    pm.response.to.have.status(201);",
							"    const response = pm.response.json();",
							"    pm.expect(response.success).to.be.true;",
							"    if (response.data && response.data.id) {",
							"        pm.collectionVariables.set('test_provider_id', String(response.data.id));",
							"        console.log('‚úÖ Proveedor de prueba creado - ID: ' + response.data.id);",
							"    }",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"test_provider\",\n    \"email\": \"test.provider@songstock.com\",\n    \"password\": \"TestProvider123!\",\n    \"firstName\": \"Ana\",\n    \"lastName\": \"Testprovider\",\n    \"phone\": \"+506-9999-8888\",\n    \"role\": \"PROVIDER\",\n    \"businessName\": \"Test Vinyl Store\",\n    \"taxId\": \"3-101-999999\",\n    \"address\": \"Test Address 123\",\n    \"city\": \"San Jos√©\",\n    \"state\": \"San Jos√©\",\n    \"country\": \"Costa Rica\",\n    \"postalCode\": \"10101\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/auth/register-provider",
					"host": ["{{base_url}}"],
					"path": ["auth", "register-provider"]
				}
			}
		},
		{
			"name": "4. üéØ HU PRINCIPAL: Listar Usuarios (Admin accede)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"‚úÖ GIVEN: Admin accede a gesti√≥n de usuarios\", function () {",
							"    pm.response.to.have.status(200);",
							"    const response = pm.response.json();",
							"    pm.expect(response.success).to.be.true;",
							"    pm.expect(response.data).to.exist;",
							"    pm.expect(response.data.content).to.be.an('array');",
							"    console.log('‚úÖ GIVEN: Admin accede correctamente a gesti√≥n de usuarios');",
							"});",
							"",
							"pm.test(\"‚úÖ Lista contiene usuarios con roles diferentes\", function () {",
							"    const response = pm.response.json();",
							"    const users = response.data.content;",
							"    const roles = [...new Set(users.map(u => u.role))];",
							"    pm.expect(roles.length).to.be.greaterThan(1);",
							"    console.log('‚úÖ Encontrados usuarios con roles: ' + roles.join(', '));",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/admin/users?page=0&size=20",
					"host": ["{{base_url}}"],
					"path": ["admin", "users"],
					"query": [
						{
							"key": "page",
							"value": "0"
						},
						{
							"key": "size",
							"value": "20"
						}
					]
				}
			}
		},
		{
			"name": "5. ‚úèÔ∏è HU: Editar Usuario (When admin edita)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"‚úÖ WHEN: Admin edita usuario exitosamente\", function () {",
							"    pm.response.to.have.status(200);",
							"    const response = pm.response.json();",
							"    pm.expect(response.success).to.be.true;",
							"    pm.expect(response.data.firstName).to.equal('Carlos Editado');",
							"    pm.expect(response.data.phone).to.equal('+506-7777-8888');",
							"    console.log('‚úÖ WHEN: Usuario editado correctamente');",
							"});",
							"",
							"pm.test(\"‚úÖ Los cambios incluyen campos actualizados\", function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.data.updatedAt).to.exist;",
							"    console.log('‚úÖ Timestamp de actualizaci√≥n registrado');",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"firstName\": \"Carlos Editado\",\n    \"lastName\": \"Testuser\",\n    \"username\": \"test_customer_edited\",\n    \"email\": \"test.customer.edited@songstock.com\",\n    \"phone\": \"+506-7777-8888\",\n    \"role\": \"CUSTOMER\",\n    \"isActive\": true,\n    \"updateReason\": \"Actualizaci√≥n de datos de prueba HU\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/admin/users/{{test_user_id}}",
					"host": ["{{base_url}}"],
					"path": ["admin", "users", "{{test_user_id}}"]
				}
			}
		},
		{
			"name": "6. üîÑ HU: Verificar Cambios Reflejados (Then cambios se reflejan)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"‚úÖ THEN: Los cambios se reflejan en el sistema\", function () {",
							"    pm.response.to.have.status(200);",
							"    const response = pm.response.json();",
							"    pm.expect(response.success).to.be.true;",
							"    pm.expect(response.data.firstName).to.equal('Carlos Editado');",
							"    pm.expect(response.data.username).to.equal('test_customer_edited');",
							"    pm.expect(response.data.phone).to.equal('+506-7777-8888');",
							"    console.log('‚úÖ THEN: Cambios reflejados correctamente en el sistema');",
							"});",
							"",
							"pm.test(\"‚úÖ CRITERIOS DE ACEPTACI√ìN CUMPLIDOS\", function () {",
							"    console.log('');",
							"    console.log('üéâ ===============================================');",
							"    console.log('‚úÖ HISTORIA DE USUARIO VALIDADA EXITOSAMENTE');",
							"    console.log('üë§ Como administrador, quiero gestionar compradores');",
							"    console.log('   y proveedores para garantizar el correcto uso');",
							"    console.log('   de la plataforma');",
							"    console.log('‚úÖ CRITERIOS DE ACEPTACI√ìN:');",
							"    console.log('   ‚úì GIVEN: Admin accede a gesti√≥n de usuarios');",
							"    console.log('   ‚úì WHEN: Edita usuario');",
							"    console.log('   ‚úì THEN: Los cambios se reflejan en el sistema');",
							"    console.log('üéâ ===============================================');",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/admin/users/{{test_user_id}}",
					"host": ["{{base_url}}"],
					"path": ["admin", "users", "{{test_user_id}}"]
				}
			}
		},
		{
			"name": "7. üè¢ HU: Gestionar Proveedores Pendientes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"‚úÖ Admin puede ver proveedores pendientes\", function () {",
							"    pm.response.to.have.status(200);",
							"    const response = pm.response.json();",
							"    pm.expect(response.success).to.be.true;",
							"    pm.expect(response.data).to.be.an('array');",
							"    console.log('‚úÖ Encontrados ' + response.data.length + ' proveedor(es) pendiente(s)');",
							"});",
							"",
							"pm.test(\"‚úÖ Nuestro proveedor est√° en estado pendiente\", function () {",
							"    const response = pm.response.json();",
							"    const testProviderId = pm.collectionVariables.get('test_provider_id');",
							"    const foundProvider = response.data.find(p => p.id == testProviderId);",
							"    if (foundProvider) {",
							"        pm.expect(foundProvider.verificationStatus).to.equal('PENDING');",
							"        console.log('‚úÖ Proveedor encontrado en estado PENDING');",
							"    }",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/admin/users/providers/pending",
					"host": ["{{base_url}}"],
					"path": ["admin", "users", "providers", "pending"]
				}
			}
		},
		{
			"name": "8. ‚úÖ HU: Verificar Proveedor",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"‚úÖ Proveedor verificado exitosamente\", function () {",
							"    pm.response.to.have.status(200);",
							"    const response = pm.response.json();",
							"    pm.expect(response.success).to.be.true;",
							"    pm.expect(response.data.verificationStatus).to.equal('VERIFIED');",
							"    console.log('‚úÖ Proveedor verificado - Estado: VERIFIED');",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"verificationStatus\": \"VERIFIED\",\n    \"verificationNotes\": \"Proveedor verificado para pruebas de HU\",\n    \"changeReason\": \"Verificaci√≥n autom√°tica para testing\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/admin/users/{{test_provider_id}}/provider/verification",
					"host": ["{{base_url}}"],
					"path": ["admin", "users", "{{test_provider_id}}", "provider", "verification"]
				}
			}
		},
		{
			"name": "9. üîç HU: B√∫squeda de Usuarios",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"‚úÖ B√∫squeda de usuarios funciona\", function () {",
							"    pm.response.to.have.status(200);",
							"    const response = pm.response.json();",
							"    pm.expect(response.success).to.be.true;",
							"    pm.expect(response.data).to.be.an('array');",
							"    console.log('‚úÖ B√∫squeda ejecutada - Resultados: ' + response.data.length);",
							"});",
							"",
							"pm.test(\"‚úÖ Encuentra usuarios por t√©rmino de b√∫squeda\", function () {",
							"    const response = pm.response.json();",
							"    const users = response.data;",
							"    const foundTestUser = users.find(u => u.username === 'test_customer_edited');",
							"    if (foundTestUser) {",
							"        console.log('‚úÖ Usuario de prueba encontrado en b√∫squeda');",
							"    }",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/admin/users/search?query=test",
					"host": ["{{base_url}}"],
					"path": ["admin", "users", "search"],
					"query": [
						{
							"key": "query",
							"value": "test"
						}
					]
				}
			}
		},
		{
			"name": "10. üìä HU: Dashboard Estad√≠sticas",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"‚úÖ Dashboard con estad√≠sticas completas\", function () {",
							"    pm.response.to.have.status(200);",
							"    const response = pm.response.json();",
							"    pm.expect(response.success).to.be.true;",
							"    pm.expect(response.data.totalUsers).to.be.a('number');",
							"    pm.expect(response.data.totalProviders).to.be.a('number');",
							"    pm.expect(response.data.verifiedProviders).to.be.a('number');",
							"    console.log('‚úÖ Dashboard generado:');",
							"    console.log('  - Total usuarios: ' + response.data.totalUsers);",
							"    console.log('  - Total proveedores: ' + response.data.totalProviders);",
							"    console.log('  - Proveedores verificados: ' + response.data.verifiedProviders);",
							"});",
							"",
							"pm.test(\"‚úÖ FUNCIONALIDAD DE GESTI√ìN ADMINISTRATIVA COMPLETA\", function () {",
							"    console.log('');",
							"    console.log('üéâ ===============================================');",
							"    console.log('‚úÖ FUNCIONALIDADES ADMINISTRATIVAS VALIDADAS:');",
							"    console.log('  ‚úì Listar usuarios con filtros');",
							"    console.log('  ‚úì Editar informaci√≥n de usuarios');",
							"    console.log('  ‚úì Gestionar proveedores pendientes');",
							"    console.log('  ‚úì Verificar/rechazar proveedores');",
							"    console.log('  ‚úì B√∫squeda avanzada de usuarios');",
							"    console.log('  ‚úì Dashboard con estad√≠sticas');",
							"    console.log('üéâ HISTORIA DE USUARIO COMPLETADA 100%');",
							"    console.log('üéâ ===============================================');",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/admin/users/dashboard/statistics",
					"host": ["{{base_url}}"],
					"path": ["admin", "users", "dashboard", "statistics"]
				}
			}
		},
		{
			"name": "11. üîí HU: Desactivar Usuario",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"‚úÖ Usuario desactivado exitosamente\", function () {",
							"    pm.response.to.have.status(200);",
							"    const response = pm.response.json();",
							"    pm.expect(response.success).to.be.true;",
							"    pm.expect(response.data.isActive).to.be.false;",
							"    console.log('‚úÖ Usuario desactivado correctamente');",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"url": {
					"raw": "{{base_url}}/admin/users/{{test_user_id}}/toggle-status?reason=Test HU - Desactivaci√≥n",
					"host": ["{{base_url}}"],
					"path": ["admin", "users", "{{test_user_id}}", "toggle-status"],
					"query": [
						{
							"key": "reason",
							"value": "Test HU - Desactivaci√≥n"
						}
					]
				}
			}
		},
		{
			"name": "12. üóëÔ∏è HU: Eliminar Usuario (Soft Delete)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"‚úÖ WHEN: Admin elimina usuario exitosamente\", function () {",
							"    pm.response.to.have.status(200);",
							"    const response = pm.response.json();",
							"    pm.expect(response.success).to.be.true;",
							"    console.log('‚úÖ WHEN: Usuario eliminado (soft delete)');",
							"});",
							"",
							"pm.test(\"‚úÖ VALIDACI√ìN FINAL DE HISTORIA DE USUARIO\", function () {",
							"    console.log('');",
							"    console.log('üéâ ===============================================');",
							"    console.log('‚úÖ HISTORIA DE USUARIO VALIDADA COMPLETAMENTE');",
							"    console.log('');",
							"    console.log('üìã HISTORIA: Como administrador, quiero gestionar');",
							"    console.log('   compradores y proveedores para garantizar el');",
							"    console.log('   correcto uso de la plataforma');",
							"    console.log('');",
							"    console.log('‚úÖ CRITERIOS DE ACEPTACI√ìN VERIFICADOS:');",
							"    console.log('   ‚úì GIVEN: Admin accede a gesti√≥n ‚úÖ');",
							"    console.log('   ‚úì WHEN: Edita usuario ‚úÖ');",
							"    console.log('   ‚úì WHEN: Elimina usuario ‚úÖ');",
							"    console.log('   ‚úì THEN: Cambios se reflejan ‚úÖ');",
							"    console.log('');",
							"    console.log('üìä FUNCIONALIDADES IMPLEMENTADAS:');",
							"    console.log('   ‚úì Listado con filtros avanzados');",
							"    console.log('   ‚úì Edici√≥n completa de usuarios');",
							"    console.log('   ‚úì Eliminaci√≥n segura (soft delete)');",
							"    console.log('   ‚úì Gesti√≥n de proveedores');",
							"    console.log('   ‚úì Verificaci√≥n de proveedores');",
							"    console.log('   ‚úì B√∫squeda y filtros');",
							"    console.log('   ‚úì Dashboard administrativo');",
							"    console.log('   ‚úì Auditor√≠a completa');",
							"    console.log('');",
							"    console.log('üéâ RESULTADO: HISTORIA DE USUARIO EXITOSA');",
							"    console.log('üéâ ===============================================');",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}/admin/users/{{test_user_id}}?reason=Test HU - Eliminaci√≥n de prueba",
					"host": ["{{base_url}}"],
					"path": ["admin", "users", "{{test_user_id}}"],
					"query": [
						{
							"key": "reason",
							"value": "Test HU - Eliminaci√≥n de prueba"
						}
					]
				}
			}
		}
	]
}