{
	"info": {
		"name": "SongStock - HU: Definir inventario de vinilos",
		"description": "Validaci√≥n espec√≠fica de la Historia de Usuario: Como proveedor, quiero definir el inventario de unidades de cada vinilo para controlar la disponibilidad.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{jwt_token}}",
				"type": "string"
			}
		]
	},
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8080/api/v1",
			"type": "string"
		},
		{
			"key": "jwt_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "provider_jwt_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "product_id",
			"value": "",
			"type": "string"
		}
	],
	"item": [
		{
			"name": "1. üîê Setup - Login Admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Login admin exitoso\", function () {",
							"    if (pm.response.code === 200) {",
							"        const response = pm.response.json();",
							"        if (response.success && response.data.token) {",
							"            pm.collectionVariables.set('jwt_token', response.data.token);",
							"            console.log('‚úÖ Token Admin guardado exitosamente');",
							"        }",
							"    }",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"usernameOrEmail\": \"admin\",\n    \"password\": \"admin123\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/auth/login",
					"host": ["{{base_url}}"],
					"path": ["auth", "login"]
				}
			}
		},
		{
			"name": "2. üè¢ Verificar Proveedor",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Proveedor verificado exitosamente\", function () {",
							"    pm.response.to.have.status(200);",
							"    const response = pm.response.json();",
							"    pm.expect(response.success).to.be.true;",
							"    console.log('‚úÖ Proveedor ID 1 verificado para pruebas de inventario');",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"url": {
					"raw": "{{base_url}}/providers/1/verify",
					"host": ["{{base_url}}"],
					"path": ["providers", "1", "verify"]
				}
			}
		},
		{
			"name": "3. üîë Login Proveedor",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Login proveedor exitoso\", function () {",
							"    if (pm.response.code === 200) {",
							"        const response = pm.response.json();",
							"        if (response.success && response.data.token) {",
							"            pm.collectionVariables.set('provider_jwt_token', response.data.token);",
							"            pm.collectionVariables.set('jwt_token', response.data.token);",
							"            console.log('‚úÖ Token Proveedor guardado - Listo para gestionar inventario');",
							"        }",
							"    }",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"usernameOrEmail\": \"provider1\",\n    \"password\": \"password123\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/auth/login",
					"host": ["{{base_url}}"],
					"path": ["auth", "login"]
				}
			}
		},
		{
			"name": "4. üìã Obtener Productos del Proveedor",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Productos del proveedor obtenidos\", function () {",
							"    pm.response.to.have.status(200);",
							"    const response = pm.response.json();",
							"    pm.expect(response.success).to.be.true;",
							"    if (response.data && response.data.length > 0) {",
							"        pm.collectionVariables.set('product_id', String(response.data[0].id));",
							"        console.log('‚úÖ Producto encontrado para pruebas - ID: ' + response.data[0].id);",
							"        console.log('üì¶ Stock actual: ' + response.data[0].stockQuantity);",
							"    } else {",
							"        console.log('‚ö†Ô∏è No hay productos del proveedor - crear uno primero');",
							"    }",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/products/provider/1",
					"host": ["{{base_url}}"],
					"path": ["products", "provider", "1"]
				}
			}
		},
		{
			"name": "5. üéØ HU PRINCIPAL: Actualizar Stock Completo",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"‚úÖ HISTORIA DE USUARIO - Stock actualizado exitosamente\", function () {",
							"    pm.response.to.have.status(200);",
							"    const response = pm.response.json();",
							"    pm.expect(response.success).to.be.true;",
							"    pm.expect(response.data).to.exist;",
							"    console.log('üéâ ENDPOINT PRINCIPAL DE INVENTARIO FUNCIONANDO');",
							"});",
							"",
							"pm.test(\"‚úÖ CRITERIO 1: Proveedor puede definir cantidad de vinilos\", function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.data.currentStock).to.equal(25);",
							"    console.log('‚úÖ GIVEN: Proveedor gestiona su inventario');",
							"});",
							"",
							"pm.test(\"‚úÖ CRITERIO 2: Stock se refleja correctamente en la plataforma\", function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.data.currentStock).to.exist;",
							"    pm.expect(response.data.lastStockUpdate).to.exist;",
							"    console.log('‚úÖ WHEN: Define cantidad de vinilos');",
							"    console.log('‚úÖ THEN: Stock se refleja en la plataforma');",
							"});",
							"",
							"pm.test(\"‚úÖ CRITERIO 3: Informaci√≥n completa del producto disponible\", function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.data.productId).to.exist;",
							"    pm.expect(response.data.sku).to.exist;",
							"    pm.expect(response.data.albumTitle).to.exist;",
							"    pm.expect(response.data.price).to.exist;",
							"    console.log('‚úÖ Informaci√≥n completa del inventario disponible');",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"stockQuantity\": 25,\n    \"updateReason\": \"Reabastecimiento de inventario mensual\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/products/{{product_id}}/stock",
					"host": ["{{base_url}}"],
					"path": ["products", "{{product_id}}", "stock"]
				}
			}
		},
		{
			"name": "6. üìà HU: Incrementar Stock",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"‚úÖ Stock incrementado exitosamente\", function () {",
							"    pm.response.to.have.status(200);",
							"    const response = pm.response.json();",
							"    pm.expect(response.success).to.be.true;",
							"    pm.expect(response.data.currentStock).to.equal(35);",
							"    console.log('‚úÖ Stock incrementado de 25 a 35 unidades');",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"adjustmentType\": \"INCREMENT\",\n    \"quantity\": 10,\n    \"reason\": \"Nueva llegada de vinilos\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/products/{{product_id}}/stock/adjust",
					"host": ["{{base_url}}"],
					"path": ["products", "{{product_id}}", "stock", "adjust"]
				}
			}
		},
		{
			"name": "7. üìâ HU: Decrementar Stock",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"‚úÖ Stock decrementado exitosamente\", function () {",
							"    pm.response.to.have.status(200);",
							"    const response = pm.response.json();",
							"    pm.expect(response.success).to.be.true;",
							"    pm.expect(response.data.currentStock).to.equal(30);",
							"    console.log('‚úÖ Stock decrementado de 35 a 30 unidades');",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"adjustmentType\": \"DECREMENT\",\n    \"quantity\": 5,\n    \"reason\": \"Venta realizada\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/products/{{product_id}}/stock/adjust",
					"host": ["{{base_url}}"],
					"path": ["products", "{{product_id}}", "stock", "adjust"]
				}
			}
		},
		{
			"name": "8. üìä HU: Consultar Inventario del Producto",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"‚úÖ Inventario consultado exitosamente\", function () {",
							"    pm.response.to.have.status(200);",
							"    const response = pm.response.json();",
							"    pm.expect(response.success).to.be.true;",
							"    pm.expect(response.data.currentStock).to.equal(30);",
							"    console.log('‚úÖ Stock actual confirmado: ' + response.data.currentStock);",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/products/{{product_id}}/inventory",
					"host": ["{{base_url}}"],
					"path": ["products", "{{product_id}}", "inventory"]
				}
			}
		},
		{
			"name": "9. üìã HU: Resumen de Inventario del Proveedor",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"‚úÖ Resumen de inventario obtenido\", function () {",
							"    pm.response.to.have.status(200);",
							"    const response = pm.response.json();",
							"    pm.expect(response.success).to.be.true;",
							"    pm.expect(response.data.providerId).to.exist;",
							"    pm.expect(response.data.totalProducts).to.be.greaterThan(0);",
							"    pm.expect(response.data.totalUnitsInStock).to.be.greaterThan(0);",
							"    console.log('üìä Total productos: ' + response.data.totalProducts);",
							"    console.log('üì¶ Total unidades: ' + response.data.totalUnitsInStock);",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/products/inventory/summary",
					"host": ["{{base_url}}"],
					"path": ["products", "inventory", "summary"]
				}
			}
		},
		{
			"name": "10. üîç HU: Productos con Stock Bajo",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"‚úÖ Consulta de stock bajo exitosa\", function () {",
							"    pm.response.to.have.status(200);",
							"    const response = pm.response.json();",
							"    pm.expect(response.success).to.be.true;",
							"    console.log('‚úÖ Productos con stock bajo (‚â§10): ' + response.data.length);",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/products/inventory/low-stock?minStock=10",
					"host": ["{{base_url}}"],
					"path": ["products", "inventory", "low-stock"],
					"query": [
						{
							"key": "minStock",
							"value": "10"
						}
					]
				}
			}
		},
		{
			"name": "11. ‚ùå Validaci√≥n: Stock Negativo",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"‚úÖ Validaci√≥n: No permite stock negativo\", function () {",
							"    pm.response.to.have.status(400);",
							"    const response = pm.response.json();",
							"    pm.expect(response.success).to.be.false;",
							"    console.log('‚úÖ Sistema rechaza stock negativo correctamente');",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"stockQuantity\": -5,\n    \"updateReason\": \"Intento de stock negativo\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/products/{{product_id}}/stock",
					"host": ["{{base_url}}"],
					"path": ["products", "{{product_id}}", "stock"]
				}
			}
		},
		{
			"name": "12. ‚ùå Validaci√≥n: Decremento Excesivo",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"‚úÖ Validaci√≥n: No permite decremento que resulte en negativo\", function () {",
							"    pm.response.to.have.status(400);",
							"    const response = pm.response.json();",
							"    pm.expect(response.success).to.be.false;",
							"    console.log('‚úÖ Sistema rechaza decremento excesivo correctamente');",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"adjustmentType\": \"DECREMENT\",\n    \"quantity\": 50,\n    \"reason\": \"Intento de decremento excesivo\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/products/{{product_id}}/stock/adjust",
					"host": ["{{base_url}}"],
					"path": ["products", "{{product_id}}", "stock", "adjust"]
				}
			}
		},
		{
			"name": "13. üéâ Validaci√≥n Final: Estado del Inventario",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"üéâ HISTORIA DE USUARIO COMPLETADA EXITOSAMENTE\", function () {",
							"    pm.response.to.have.status(200);",
							"    const response = pm.response.json();",
							"    pm.expect(response.success).to.be.true;",
							"    pm.expect(response.data.currentStock).to.equal(30);",
							"    ",
							"    console.log('');",
							"    console.log('üéâ ===============================================');",
							"    console.log('‚úÖ HISTORIA DE USUARIO VALIDADA COMPLETAMENTE');",
							"    console.log('üìù Como proveedor, quiero definir el inventario');",
							"    console.log('   de unidades de cada vinilo para controlar');",
							"    console.log('   la disponibilidad.');",
							"    console.log('');",
							"    console.log('‚úÖ CRITERIOS DE ACEPTACI√ìN CUMPLIDOS:');",
							"    console.log('   ‚úì GIVEN: Proveedor gestiona su inventario');",
							"    console.log('   ‚úì WHEN: Define cantidad de vinilos');",
							"    console.log('   ‚úì THEN: El stock se refleja en la plataforma');",
							"    console.log('');",
							"    console.log('üõ°Ô∏è VALIDACIONES DE SEGURIDAD VERIFICADAS:');",
							"    console.log('   ‚úì Solo proveedor due√±o puede modificar');",
							"    console.log('   ‚úì No permite stock negativo');",
							"    console.log('   ‚úì Auditor√≠a de cambios implementada');",
							"    console.log('');",
							"    console.log('üìä STOCK FINAL: ' + response.data.currentStock + ' unidades');",
							"    console.log('üéâ ===============================================');",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/products/{{product_id}}/inventory",
					"host": ["{{base_url}}"],
					"path": ["products", "{{product_id}}", "inventory"]
				}
			}
		}
	]
}